<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="textBox1.Text" xml:space="preserve">
    <value>피연산자를 입력하고 연산자를 입력하면 출력결과가 반환됩니다.

[제어 버튼]
C : 메모리, 스크린에 있는 모든 데이터를 초기화합니다.
AC : 스크린에 입력한 피연산자를 초기화합니다.
←: 입력버퍼에 있는 피연산자를 한글자 지웁니다.

[이항 연산자]
연산자와 피연산자와의 연산을 합니다.
+ : 피연산자끼리의 합을 구합니다.
- : 피연산자끼리의 차를 구합니다.
* : 피연산자끼리의 곱을 구합니다.
/ : 피연산자끼리의 몫을 구합니다.
Mod : 피연산자끼리의 나머지를 구합니다.
^ : 피연산자끼리의 제곱을 구합니다.
ⁿ√ : 피연산자끼리의 n제곱근을 구합니다.

[단항 연산자]
현재까지 입력된 식을 모두 계산한 뒤 결과값을 스크린에 표시합니다.
±: 부호를 변경 합니다.
1/x : 역수를 구합니다.
√², √³, √⁴ : 루트 연산을 합니다.
x², x³, x⁴, 10^x: 지정된 제곱 연산을 합니다.
Sin, Cos, Tan: 지정된 값의 Sin, Cos, Tan을 연산합니다.
ASin, ACos, Atan : 지정된 값에 Sin, Cos, Tan을 적용 했을 때의 각도가 반환됩니다.
n!: 팩토리얼을 반환합니다. 연산될 숫자는 반드시 자연수여야 합니다.
log : Logn 을 구합니다.
log2 : xLog2를 구합니다.
ln : 지정된 숫자의 자연 로그(밑 e)를 반환합니다.
e^x : e를 지정된 수만큼 거듭제곱하여 반환합니다.


= : 다음 규칙에 따라 연산한 결과를 구합니다.
1. 피연산자가 입력 되어있고, 이항연산자와 그것의 피연산자가 입력돼있을경우
(입력한 피연산자) (연산자) (이항연산자의 피연산자)의 결과를 반환합니다.

2. 이항연산자와 그것의 피연산자가 입력 되어있을경우
(스크린에 있는 피연산자) (연산자) (이항연산자의 피연산자)의 결과를 반환합니다.

3. 이항연산을 스크린에 나온 결과값을 눌럿을경우
(스크린에 있는 피연산자) (가장 최근에 연산한 연산자) (가장 최근에 연산한 피연산자)의 결과를 반환합니다.
</value>
  </data>
</root>